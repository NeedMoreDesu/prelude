(defun forward-number()
  (interactive)
  (while (looking-at "[0-9]") (forward-char))
  (re-search-forward "[0-9]+")
  (cons (match-beginning 0) (match-end 0)))

(defun cm-number-inc(n)
  (interactive "p")
  (save-excursion
    (if (region-active-p)
      (progn
        (let (deactivate-mark)
          (deactivate-mark)
          (when (> (point) (mark)) (exchange-point-and-mark nil))
          (while (< (goto-char (car (forward-number))) (mark))
            (cm-number-inc n))
          (activate-mark)))
      (let ((number "")(i 0))
        (while (and (char-after) (/= (char-after) ? ))
          (setq number (format "%s%c" number (char-after)))
          (forward-char 1)
          (setq i (1+ i)))
        (backward-char i)
        (if (or (/= 0 (string-to-int number)) (and (not (string= "" number)) (= (aref number 0) ?0)))
          (progn
            (setq number (int-to-string (string-to-int number)))
            (delete-char (string-width number))
            (setq number (int-to-string (+ (string-to-int number) n)))
            (princ number (current-buffer))
            (backward-char (string-width number))))))))

(defun cm-number-dec(n)
  (interactive "p")
  (save-excursion
    (if (region-active-p)
      (progn
        (let (deactivate-mark)
          (deactivate-mark)
          (when (> (point) (mark)) (exchange-point-and-mark nil))
          (while (< (goto-char (car (forward-number))) (mark))
            (cm-number-dec n))
          (activate-mark)))
      (let ((number "")(i 0))
        (while (and (char-after) (/= (char-after) ? ))
          (setq number (format "%s%c" number (char-after)))
          (forward-char 1)
          (setq i (1+ i)))
        (backward-char i)
        (if (or (/= 0 (string-to-int number)) (and (not (string= "" number)) (= (aref number 0) ?0)))
          (progn
            (setq number (int-to-string (string-to-int number)))
            (delete-char (string-width number))
            (setq number (int-to-string (- (string-to-int number) n)))
            (princ number (current-buffer))
            (backward-char (string-width number))))))))

(defun cm-calc-eval(str)
  (interactive
    (list (read-string "Enter calc expression: " (if (region-active-p)
                                                   (buffer-substring-no-properties (region-beginning) (region-end))
                                                   ""))))
  (if (region-active-p)
    (delete-region (region-beginning) (region-end)))
  (insert (calc-eval str)))

(defun cm-calc-eval-line ()
 (interactive)
 (let* ((line-string (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
        (before-equal-sign (car (split-string line-string "=")))
        (evaluated-result (calc-eval before-equal-sign)))
  (move-beginning-of-line nil)
  (delete-region (point-at-bol) (point-at-eol))
  (insert before-equal-sign)
  (just-one-space)
  (insert "= " evaluated-result)
  (kill-new evaluated-result)))

(provide 'cmnuminc)
